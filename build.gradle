plugins {
    id 'java'
    id 'org.jetbrains.kotlin.jvm' version '1.3.72'
    id 'checkstyle'
    id 'pmd'
    id 'name.remal.sonarlint' version '1.0.198'
    id 'org.sonarqube' version '3.0'
    id 'jacoco'
    id 'info.solidsoft.pitest' version '1.5.1'
    id 'name.remal.check-updates' version '1.0.198'
    id 'io.gitlab.arturbosch.detekt' version '1.10.0'
    id 'org.jlleitschuh.gradle.ktlint' version '9.2.1'
}

group 'com.nelkinda.training.gameoflife'
version '0.0.1-SNAPSHOT'

sourceCompatibility = 13

repositories {
    mavenCentral()
    jcenter()
}

ext {
    cucumberVersion = '6.1.2'
    hamcrestVersion = '2.2'
    junitVersion = '4.13'
    junitJupiterVersion = '5.6.2'
    junitPlatformVersion = '1.6.2'
    lombokVersion = '1.18.12'
    mockitoVersion = '3.3.3'
    pmdVersion = '6.25.0'
}

dependencies {
    checkstyle 'com.puppycrawl.tools:checkstyle:8.34'

    annotationProcessor "org.projectlombok:lombok:$rootProject.ext.lombokVersion"
    compileOnly "org.projectlombok:lombok:$rootProject.ext.lombokVersion"

    implementation 'org.jetbrains.kotlin:kotlin-stdlib-jdk8'

    testAnnotationProcessor "org.projectlombok:lombok:$rootProject.ext.lombokVersion"
    testCompileOnly "org.projectlombok:lombok:$rootProject.ext.lombokVersion"

    testImplementation "io.cucumber:cucumber-java:$rootProject.ext.cucumberVersion"
    testImplementation "io.cucumber:cucumber-junit:$rootProject.ext.cucumberVersion"
    testImplementation "io.cucumber:cucumber-junit-platform-engine:$rootProject.ext.cucumberVersion"
    testImplementation "junit:junit:$rootProject.ext.junitVersion"
    testImplementation "org.hamcrest:hamcrest:$rootProject.ext.hamcrestVersion"
    testImplementation "org.jetbrains.kotlin:kotlin-test"
    testImplementation "org.jetbrains.kotlin:kotlin-test-junit"
    testImplementation "org.junit.jupiter:junit-jupiter:$rootProject.ext.junitJupiterVersion"
    testImplementation "org.junit.jupiter:junit-jupiter-api:$rootProject.ext.junitJupiterVersion"
    testImplementation "org.junit.jupiter:junit-jupiter-engine:$rootProject.ext.junitJupiterVersion"
    testImplementation "org.junit.jupiter:junit-jupiter-params:$rootProject.ext.junitJupiterVersion"
    testImplementation "org.junit.platform:junit-platform-commons:$rootProject.ext.junitPlatformVersion"
    testImplementation "org.junit.platform:junit-platform-engine:$rootProject.ext.junitPlatformVersion"
    testImplementation "org.junit.vintage:junit-vintage-engine:$rootProject.ext.junitJupiterVersion"
    testImplementation "org.mockito:mockito-core:$rootProject.ext.mockitoVersion"

    pitest 'org.pitest:pitest-junit5-plugin:0.12'
    pitest 'org.pitest:pitest-command-line:1.5.2'
}

checkDependencyUpdates {
    failIfUpdatesFound = true
}

checkstyleMain {
    configFile = file("config/checkstyle/checkstyleMain.xml")
    maxWarnings = 0
}

checkstyleTest {
    configFile = file("config/checkstyle/checkstyleTest.xml")
    maxWarnings = 0
}

jacocoTestCoverageVerification {
    violationRules {
        rule {
            limit {
                minimum = 1.0
            }
        }
    }
}
check.dependsOn jacocoTestCoverageVerification

jacocoTestReport {
    reports {
        xml.enabled true
        csv.enabled true
        html.enabled true
    }
}
test.finalizedBy jacocoTestReport

tasks.withType(org.jetbrains.kotlin.gradle.tasks.KotlinCompile).all {
    kotlinOptions {
        freeCompilerArgs = ["-Xjsr305=strict"]
        jvmTarget = "13"
    }
}

ktlint {
    version.set('0.37.2')
}

pitest {
    targetClasses = ['com.nelkinda.training.gameoflife.*']
    pitestVersion = '1.5.2'
    timestampedReports = false
    testPlugin = 'junit5'
    outputFormats = ['XML', 'HTML']
    mutators = ['DEFAULTS', 'STRONGER', 'CONSTRUCTOR_CALLS', 'INLINE_CONSTS', 'REMOVE_CONDITIONALS', 'REMOVE_INCREMENTS', 'ROR']
    mutationThreshold = 100
    coverageThreshold = 100
}

pmd {
    ruleSets = []
    consoleOutput = true
    dependencies {
        pmd "net.sourceforge.pmd:pmd:$rootProject.ext.pmdVersion"
        pmd "net.sourceforge.pmd:pmd-core:$rootProject.ext.pmdVersion"
        pmd "net.sourceforge.pmd:pmd-java:$rootProject.ext.pmdVersion"
    }
}

pmdMain {
    ruleSetFiles = files("config/pmd/pmdMain.xml")
}

pmdTest {
    ruleSetFiles = files("config/pmd/pmdTest.xml")
}

test {
    useJUnitPlatform()
}

wrapper {
    gradleVersion '6.5'
    distributionType = Wrapper.DistributionType.ALL
}
