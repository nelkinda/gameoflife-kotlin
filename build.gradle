plugins {
    id 'java'
    id 'org.jetbrains.kotlin.jvm' version '1.6.10'
    id 'checkstyle'
    id 'pmd'
    id 'name.remal.sonarlint' version '1.5.0'
    id 'org.sonarqube' version '3.3'
    id 'jacoco'
    id 'info.solidsoft.pitest' version '1.7.0'
    id 'io.gitlab.arturbosch.detekt' version '1.19.0'
    id 'org.jlleitschuh.gradle.ktlint' version '10.2.1'
    id 'io.spring.dependency-management' version '1.0.11.RELEASE'
}

group 'com.nelkinda.training.gameoflife'
version '0.0.1-SNAPSHOT'

sourceCompatibility = 16

repositories {
    mavenCentral()
}

dependencyManagement {
    dependencies {
        dependency 'com.puppycrawl.tools:checkstyle:9.2.1'
        dependencySet(group: 'io.cucumber', version: '7.2.3') {
            entry 'cucumber-java'
            entry 'cucumber-junit'
            entry 'cucumber-junit-platform-engine'
        }
        dependency 'junit:junit:4.13.2'
        dependencySet(group: 'net.sourceforge.pmd', version: '6.41.0') {
            entry 'pmd'
            entry 'pmd-core'
            entry 'pmd-java'
        }
        dependency 'org.hamcrest:hamcrest:2.2'
        dependencySet(group: 'org.junit.jupiter', version: '5.7.2') {
            entry 'junit-jupiter'
            entry 'junit-jupiter-api'
            entry 'junit-jupiter-engine'
            entry 'junit-jupiter-params'
        }
        dependencySet(group: 'org.junit.platform', version: '1.7.2') {
            entry 'junit-platform-commons'
            entry 'junit-platform-engine'
        }
        dependency 'org.junit.vintage:junit-vintage-engine:5.8.2'
        dependency 'org.pitest:pitest-junit5-plugin:0.15'
        dependency 'org.pitest:pitest-command-line:1.7.3'
    }
}

dependencies {
    checkstyle 'com.puppycrawl.tools:checkstyle'

    implementation 'org.jetbrains.kotlin:kotlin-stdlib-jdk8'

    testImplementation 'io.cucumber:cucumber-java'
    testImplementation 'io.cucumber:cucumber-junit'
    testImplementation 'io.cucumber:cucumber-junit-platform-engine'
    testImplementation 'junit:junit'
    testImplementation 'org.hamcrest:hamcrest'
    testImplementation 'org.jetbrains.kotlin:kotlin-test'
    testImplementation 'org.jetbrains.kotlin:kotlin-test-junit5'
    testImplementation 'org.junit.jupiter:junit-jupiter'
    testImplementation 'org.junit.jupiter:junit-jupiter-api'
    testImplementation 'org.junit.jupiter:junit-jupiter-engine'
    testImplementation 'org.junit.jupiter:junit-jupiter-params'
    testImplementation 'org.junit.platform:junit-platform-commons'
    testImplementation 'org.junit.platform:junit-platform-engine'
    testImplementation 'org.junit.vintage:junit-vintage-engine'

    pitest 'org.pitest:pitest-junit5-plugin'
    pitest 'org.pitest:pitest-command-line'
}

checkstyleMain {
    configFile = file("config/checkstyle/checkstyleMain.xml")
    maxWarnings = 0
}

checkstyleTest {
    configFile = file("config/checkstyle/checkstyleTest.xml")
    maxWarnings = 0
}

jacoco {
    toolVersion = "0.8.7"
}

jacocoTestCoverageVerification {
    violationRules {
        rule {
            limit {
                minimum = 1.0
            }
        }
    }
}
check.dependsOn jacocoTestCoverageVerification

jacocoTestReport {
    reports {
        xml.enabled true
        csv.enabled true
        html.enabled true
    }
}
test.finalizedBy jacocoTestReport

tasks.withType(org.jetbrains.kotlin.gradle.tasks.KotlinCompile).all {
    kotlinOptions {
        freeCompilerArgs = ["-Xjsr305=strict", "-Xjvm-default=enable"]
        jvmTarget = "16"
    }
}

ktlint {
    version = '0.41.0'
    verbose = true
}

pitest {
    targetClasses.set(['com.nelkinda.training.gameoflife.*'])
    pitestVersion.set('1.6.6')
    timestampedReports.set(false)
    testPlugin.set('junit5')
    outputFormats.set(['XML', 'HTML'])
    mutators.set(['DEFAULTS', 'STRONGER', 'CONSTRUCTOR_CALLS', 'INLINE_CONSTS', 'REMOVE_CONDITIONALS', 'REMOVE_INCREMENTS', 'ROR'])
    mutationThreshold.set(100)
    coverageThreshold.set(100)
}

pmd {
    ruleSets = []
    consoleOutput = true
    dependencies {
        pmd 'net.sourceforge.pmd:pmd'
        pmd 'net.sourceforge.pmd:pmd-core'
        pmd 'net.sourceforge.pmd:pmd-java'
    }
}

pmdMain {
    ruleSetFiles = files("config/pmd/pmdMain.xml")
}

pmdTest {
    ruleSetFiles = files("config/pmd/pmdTest.xml")
}

test {
    useJUnitPlatform()
}

wrapper {
    gradleVersion '7.1.1'
    distributionType = Wrapper.DistributionType.ALL
}
